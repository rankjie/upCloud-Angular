// Generated by CoffeeScript 1.6.3
var Controllers, Directives, baseURL, dashboardURL, fileURL, homeURL, indexURL, isLogin, isPic, tempURL, testURL, upCloud, upyunBaseDomain;

baseURL = 'http://localhost:3000';

tempURL = "/a/Build";

indexURL = tempURL + '/';

homeURL = tempURL + '/home';

dashboardURL = tempURL + '/dashboard';

fileURL = tempURL + '/f';

testURL = tempURL + '/test';

upyunBaseDomain = 'b0.upaiyun.com';

upCloud = angular.module('upCloud', ['ngCookies', 'ngRoute']);

Controllers = {};

Directives = {};

upCloud.service('myData', function() {
  var DataStore, myDataStore;
  DataStore = (function() {
    function DataStore() {}

    return DataStore;

  })();
  myDataStore = new DataStore;
  return myDataStore;
});

Directives['filelistBind'] = function($http) {
  return function(scope, elm, attrs) {
    return elm.bind("change", function(evt) {
      return scope.$apply(function() {
        return $http.post(baseURL + '/api/files', {
          dir_id: 0,
          file_name: evt.target.files[0].name,
          version_of: 5
        }).success(function(res) {
          scope.bucket = res.bucket;
          scope.form_policy = res.policy;
          scope.form_sign = res.sign;
          scope[attrs.name] = evt.target.files;
          readFile();
          console.log(scope[attrs.name]);
          return console.log(evt.target.files[0].name);
        });
      });
    });
  };
};

upCloud.directive(Directives);

isPic = function(file) {
  var link, _ref;
  link = file.uri || file.link || file.name;
  if ((_ref = link.toLowerCase().split('.').pop()) === 'jpg' || _ref === 'png' || _ref === 'gif' || _ref === 'bmp' || _ref === 'raw' || _ref === 'jpeg' || _ref === 'webp' || _ref === 'ppm' || _ref === 'pgm' || _ref === 'pbm' || _ref === 'pnm' || _ref === 'pfm' || _ref === 'pam' || _ref === 'tiff' || _ref === 'exif') {
    return true;
  } else {
    return false;
  }
};

isLogin = function($http, myData) {
  var deferred;
  deferred = Q.defer();
  $http.get(baseURL + '/api/users/current').success(function(res) {
    if (res.user_id === 0) {
      delete myData.user_id;
      return deferred.resolve(false);
    } else {
      myData.user_id = res.user_id;
      return deferred.resolve(true);
    }
  }).error(function(err) {
    return deferred.reject(err);
  });
  return deferred.promise;
};

Controllers['navController'] = function($scope, $http, $location, myData) {
  $scope.logOut = function() {
    return $http["delete"](baseURL + '/api/session').success(function(res) {
      delete myData.user_id;
      return $location.path(homeURL);
    });
  };
  if (myData.user_id != null) {
    return $scope.isLogin = true;
  }
};

Controllers['FormController'] = function($scope, $http, $location, myData) {
  isLogin($http, myData).then(function(logged_in) {
    if (logged_in) {
      $location.path(dashboardURL + '/' + myData.user_id + '/0');
      return $scope.$apply();
    }
  }, function(err) {
    return console.log(err);
  });
  $scope.checkEmail = function() {
    var mail;
    mail = $scope.email;
    if (/.*@(upai.com|huaban.com|upyun.com|yupoo.com|widget-inc.com)$/g.test(mail)) {
      $scope.emailWrong = false;
      return $http.post(baseURL + '/api/users/check', {
        email: $scope.email
      }).success(function(res) {
        if (res.reg) {
          $scope.isReg = true;
          return $scope.action = 'Sign in';
        } else {
          $scope.isReg = false;
          return $scope.action = 'Sign up';
        }
      });
    } else {
      $scope.emailError = "illegal email";
      return $scope.emailWrong = true;
    }
  };
  $scope.checkPWD = function() {
    if ($scope.pwd !== $scope.pwd_repeat) {
      $scope.pwdWrong = true;
      return $scope.pwdError = 'password does not match';
    } else {
      return $scope.pwdWrong = false;
    }
  };
  return $scope.submit = function() {
    var goDashBoard;
    goDashBoard = function(user_id) {
      return $location.path(dashboardURL + '/' + user_id + '/0');
    };
    myData.user_email = $scope.email;
    if ($scope.pwd_repeat != null) {
      return $http.post(baseURL + '/api/users', {
        email: $scope.email,
        password: $scope.pwd
      }).success(function(res) {
        myData.user_id = res.id;
        return goDashBoard(res.id);
      }).error(function(err) {
        console.log(err);
        return alert(err);
      });
    } else {
      return $http.post(baseURL + '/api/session', {
        email: $scope.email,
        password: $scope.pwd
      }).success(function(res) {
        myData.user_id = res.id;
        return goDashBoard(res.id);
      }).error(function(err) {
        console.log(err);
        return alert(err);
      });
    }
  };
};

Controllers['DashBoardController'] = function($scope, $http, $location, myData, $routeParams) {
  var boxDrop, dragEnterLeave, dragOver, dropItems, dropbox, getCurrentDirContent, getGroupList, getTime, item, itemDrop, scope, uploadCanceled, uploadComplete, uploadFailed, uploadFile, uploadProgress, _i, _len;
  isLogin($http, myData).then(function(logged_in) {
    console.log(logged_in);
    if (logged_in) {
      if (($routeParams.user_id != null) && myData.user_id.toString() !== $routeParams.user_id.toString()) {
        console.log('redirect to your own dashboard... ');
        $location.path(dashboardURL + '/' + myData.user_id + '/0');
        $scope.$apply();
      }
      $scope.current_url_without_dir_id = dashboardURL + '/' + myData.user_id;
      getCurrentDirContent();
      return getGroupList();
    } else {
      console.log('please log in first');
      $location.path(homeURL);
      return $scope.$apply();
    }
  }, function(err) {
    return console.log(err);
  });
  scope = $scope;
  getTime = function(raw_date) {
    var d;
    d = new Date(raw_date);
    return d.getFullYear() + " " + ('0' + (d.getMonth() + 1)).slice(-2) + "-" + ('0' + d.getDate()).slice(-2) + ' ' + d.getHours() + ':' + ('0' + d.getMinutes()).slice(-2) + ':' + ('0' + d.getSeconds()).slice(-2);
  };
  getCurrentDirContent = function() {
    var api_point;
    console.log('get content!');
    if ($routeParams.group_id == null) {
      api_point = baseURL + '/api/users/' + $routeParams.user_id + '/files?dir_id=' + $routeParams.dir_id;
    } else {
      api_point = baseURL + '/api/groups/' + $routeParams.group_id + '/files?dir_id=' + $routeParams.dir_id;
    }
    return $http.get(api_point).success(function(res) {
      var dir, file, _i, _j, _len, _len1, _ref, _ref1, _results;
      console.log('asdasdads');
      console.log(res);
      _ref = res.dirs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        dir.previewPic = "/a/Build/assets/pic/dir.png";
        dir.created_at = getTime(dir.created_at);
        dir.updated_at = getTime(dir.updated_at);
      }
      scope.current_dir_content = res.dirs;
      _ref1 = res.files;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        file = _ref1[_j];
        if (isPic(file)) {
          file.previewPic = "http://" + file.bucket + "." + upyunBaseDomain + file.uri + "_mid";
        } else {
          file.previewPic = "/a/Build/assets/pic/file.png";
        }
        file.created_at = getTime(file.created_at);
        file.updated_at = getTime(file.updated_at);
        _results.push(scope.current_dir_content.push(file));
      }
      return _results;
    });
  };
  getGroupList = function() {
    console.log('get group');
    return $http.get(baseURL + '/api/users/' + myData.user_id + '/groups').success(function(res) {
      var group, _i, _len, _ref;
      console.log(res);
      myData.id2group = {};
      _ref = res.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        myData.id2group[group.id] = group;
      }
      if ($routeParams.group_id) {
        myData.id2group[$routeParams.group_id].liclass = 'active';
      }
      return scope.groups = res.groups;
    });
  };
  dragEnterLeave = function(evt) {
    console.log('leave');
    evt.stopPropagation();
    evt.preventDefault();
    return scope.$apply(function() {
      scope.dropText = "Drop files here";
      return scope.dropClass = "";
    });
  };
  dragOver = function(evt) {
    var clazz, ok;
    evt.stopPropagation();
    evt.preventDefault();
    clazz = "not-available";
    ok = evt.dataTransfer && evt.dataTransfer.types && evt.dataTransfer.types.indexOf("Files") >= 0;
    return scope.$apply(function() {
      scope.dropText = (ok ? "Drop files here" : "Only files are allowed!");
      return scope.dropClass = (ok ? "over" : "not-available");
    });
  };
  boxDrop = function(evt) {
    var files;
    console.log(this.id);
    console.log("drop evt:", JSON.parse(JSON.stringify(evt.dataTransfer)));
    console.log('drop');
    evt.stopPropagation();
    evt.preventDefault();
    scope.$apply(function() {
      scope.dropText = "Drop files here";
      return scope.dropClass = "";
    });
    files = evt.dataTransfer.files;
    if (files.length > 0) {
      return scope.$apply(function() {
        var i, _results;
        if (scope.files == null) {
          scope.files = [];
        }
        i = 0;
        _results = [];
        while (i < files.length) {
          scope.files.push(files[i]);
          _results.push(i++);
        }
        return _results;
      });
    }
  };
  itemDrop = function(evt) {
    var files;
    if (this.type === 'file') {
      console.log(this.version_of);
    } else {
      console.log(this.dir_id);
    }
    console.log("drop evt:", JSON.parse(JSON.stringify(evt.dataTransfer)));
    console.log('drop');
    evt.stopPropagation();
    evt.preventDefault();
    scope.$apply(function() {
      scope.dropText = "Drop files here";
      return scope.dropClass = "";
    });
    files = evt.dataTransfer.files;
    if (files.length > 0) {
      return scope.$apply(function() {
        var i, _results;
        scope.files = [];
        i = 0;
        _results = [];
        while (i < files.length) {
          scope.files.push(files[i]);
          _results.push(i++);
        }
        return _results;
      });
    }
  };
  dropbox = document.getElementById("dropbox");
  dropItems = document.getElementsByClassName('dropItems');
  scope.dropText = "Drop files here";
  dropbox.addEventListener("dragenter", dragEnterLeave, false);
  dropbox.addEventListener("dragleave", dragEnterLeave, false);
  dropbox.addEventListener("dragover", dragOver, false);
  dropbox.addEventListener("drop", boxDrop, false);
  for (_i = 0, _len = dropItems.length; _i < _len; _i++) {
    item = dropItems[_i];
    item.addEventListener("dragenter", dragEnterLeave, false);
    item.addEventListener("dragleave", dragEnterLeave, false);
    item.addEventListener("dragover", dragOver, false);
    item.addEventListener('drop', itemDrop, false);
  }
  scope.setFiles = function(element) {
    return scope.$apply(function(scope) {
      var i;
      console.log("files:", element.files);
      scope.files = [];
      i = 0;
      while (i < element.files.length) {
        scope.files.push(element.files[i]);
        i++;
      }
      return scope.progressVisible = false;
    });
  };
  uploadFile = function() {
    var nextFile;
    myData.upload_count = myData.upload_count || 0;
    nextFile = scope.files[myData.upload_count];
    return (function(file) {
      var post_data;
      post_data = {
        file_name: file.name
      };
      if ($routeParams.group_id) {
        post_data.group_id = $routeParams.group_id;
        post_data.group_parent_directory_id = $routeParams.dir_id;
      } else {
        post_data.parent_directory_id = $routeParams.dir_id;
      }
      return $http.post(baseURL + '/api/files', post_data).success(function(res) {
        var fd, xhr;
        xhr = new XMLHttpRequest();
        xhr.upload.addEventListener("progress", uploadProgress, false);
        xhr.addEventListener("load", uploadComplete, false);
        xhr.addEventListener("error", uploadFailed, false);
        xhr.addEventListener("abort", uploadCanceled, false);
        console.log(res);
        fd = new FormData();
        fd.append("file", file);
        fd.append('policy', res.policy);
        fd.append('signature', res.sign);
        xhr.open("POST", "http://v0.api.upyun.com/" + res.bucket);
        scope.progressVisible = true;
        return xhr.send(fd);
      }).error(function(err) {
        return console.log(err);
      });
    })(nextFile);
  };
  scope.uploadFile = uploadFile;
  uploadComplete = function(evt) {
    var delay;
    console.log("File: " + scope.files[myData.upload_count].name + ' upload done');
    console.log(evt.target.response);
    myData.upload_count += 1;
    if (scope.files.length > myData.upload_count) {
      return uploadFile();
    } else {
      delete myData.upload_count;
      delay = 2 * 1000;
      return setTimeout(function() {
        return getCurrentDirContent();
      }, delay);
    }
  };
  uploadProgress = function(evt) {
    return scope.$apply(function() {
      if (evt.lengthComputable) {
        return scope.progress = Math.round(evt.loaded * 100 / evt.total);
      } else {
        return scope.progress = "unable to compute";
      }
    });
  };
  uploadFailed = function(evt) {
    return alert("There was an error attempting to upload the file.");
  };
  uploadCanceled = function(evt) {
    scope.$apply(function() {
      return scope.progressVisible = false;
    });
    return alert("The upload has been canceled by the user or the browser dropped the connection.");
  };
  scope.createDir = function() {
    var dir_id, name, post_data;
    console.log('gonna create dir');
    dir_id = $routeParams.dir_id || 0;
    name = $scope.new_dir_name;
    $scope.new_dir_name = '';
    post_data = {
      name: name
    };
    if ($routeParams.group_id) {
      post_data.group_parent_directory_id = dir_id;
      post_data.group_id = $routeParams.group_id;
    } else {
      post_data.parent_directory_id = dir_id;
    }
    console.log(post_data);
    return $http.post(baseURL + '/api/dirs', post_data).success(function(res) {
      return getCurrentDirContent();
    });
  };
  scope.createGroup = function() {
    var name;
    console.log('gonna create a group');
    name = scope.new_group_name;
    scope.new_group_name = '';
    return $http.post(baseURL + '/api/groups', {
      name: name
    }).success(function(res) {
      return getGroupList();
    }).error(function(err) {
      return console.log(err);
    });
  };
  scope.deleteItem = function(item) {
    var api_point;
    api_point = "" + baseURL + "/api/" + item.type + "s/" + item.id;
    if (confirm('sure?')) {
      return $http["delete"](api_point).success(function(res) {
        console.log(res);
        return getCurrentDirContent();
      }).error(function(err) {
        return console.log(err);
      });
    }
  };
  return scope.editItem = function(item) {
    var api_point, new_name;
    new_name = prompt('new name');
    if (new_name !== '' && (new_name != null)) {
      api_point = "" + baseURL + "/api/" + item.type + "s/" + item.id;
      return $http.put(api_point, {
        new_name: new_name
      }).success(function(result) {
        console.log(result);
        return getCurrentDirContent();
      }).error(function(err) {
        return console.log(err);
      });
    } else {
      return alert('good.');
    }
  };
};

Controllers['FileController'] = function($http, $scope, $routeParams, myData) {
  var file_id;
  console.log(fileURL + '/:file_id');
  file_id = $routeParams.file_id;
  console.log(baseURL + '/api/files/' + file_id + '/link');
  return $http.get(baseURL + '/api/files/' + file_id + '/link').success(function(file) {
    $scope.file_link = file.link;
    $scope.file_name = file.name;
    if (isPic(file)) {
      $scope.isPic = true;
    }
    return console.log(file);
  }).error(function(err) {
    $scope.file_name = err.message;
    return console.log(err);
  });
};

upCloud.controller(Controllers);

upCloud.config(function($routeProvider, $locationProvider) {
  $locationProvider.html5Mode(true);
  return $routeProvider.when(indexURL, {
    redirectTo: tempURL + '/home'
  }).when(homeURL, {
    templateUrl: tempURL + '/home.partial'
  }).when(dashboardURL + '/:user_id/:dir_id', {
    templateUrl: tempURL + '/dashboard.partial'
  }).when(dashboardURL + '/group/:group_id/:dir_id', {
    templateUrl: tempURL + '/dashboard.partial'
  }).when(fileURL + '/:file_id', {
    templateUrl: tempURL + '/file.partial'
  }).when(testURL, {
    templateUrl: tempURL + '/test.partial'
  }).otherwise({
    redirectTo: tempURL + '/home'
  });
});
